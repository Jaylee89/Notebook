2018-05-23, 将要学习05课程
2018-05-24, 将要学习08课程
2018-05-25, 将要学习16课程
2018-05-26, 将要学习21课程
2018-05-28, 将要学习27课程
2018-05-30, 将要学习31课程


//===========================
笔记:

加载配置文件入口:
1, 传统方式
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("beans.xml");
    Person bean = (Person) applicationContext.getBean("person");
    System.out.println(bean);
        
2, 直接加载注解配置文件
    ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);
    Person bean = applicationContext.getBean(Person.class);
    System.out.println(bean);
    
    String[] namesForType = applicationContext.getBeanNamesForType(Person.class);
    for (String name : namesForType) {
        System.out.println(name);
    }

@Configuration                        //告诉Spring这是一个配置类
@ComponentScans                       //定义扫面范围,数组
@ComponentScan                        //定义扫描规则, 可以指定扫描规则

@Filter(type=FilterType.ANNOTATION,classes={Controller.class}),
@Filter(type=FilterType.ASSIGNABLE_TYPE,classes={BookService.class}),
@Filter(type=FilterType.CUSTOM,classes={MyTypeFilter.class}), MyTypeFilter.class implements TypeFilter.class

@Bean("person")                       //给容器中注册一个Bean; 类型为返回值的类型，id默认是用方法名作为id (首字母小写), 一般用于导入的第三方包的组件

@Controller                           //自定义组件
@Service
@Repository
@Component                            //自定义组件

@Import[快速给容器中导入组件01, 快速给容器中导入组件02, 快速给容器中导入组件03]
* 1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名
* 2）、ImportSelector:返回需要导入的组件的全类名数组；override selectImports(AnnotationMetadata anno) method, then return a sting array
        AnnotationMetadata可以将当前标注@Import注解的类的所有注解信息拿到
* 3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中
        AnnotationMetadata：当前类的注解信息
	    BeanDefinitionRegistry:BeanDefinition注册类；
	   	    把所有需要添加到容器中的bean；调用
	   	    BeanDefinitionRegistry.registerBeanDefinition手工注册进来
            RootBeanDefinition来指定bean的信息(包括类型,作用域等)

使用Spring提供的 FactoryBean（工厂Bean）;
* 1）、默认获取到的是工厂bean调用getObject创建的对象, 返回的是工厂Bean对应的具体实例
* 2）、要获取工厂Bean本身，我们需要给id前面加一个&colorFactoryBean, 可参考BeanFactory里的设计,有个&作为前缀, 此时返回的是工厂Bean
        Object bean4 = applicationContext.getBean("&colorFactoryBean");

@Autowired                            //默认以类型注入
@Resources                            //作为@Resource的集合, 只适用于@Target({TYPE})
@Resource                             //默认按名注入, 适用于@Target({TYPE(类), FIELD(字段), METHOD(方法)})

@Scope                                //默认是singleton

* prototype：多实例的：ioc容器启动并不会去调用方法创建对象放在容器中, 
* 			     每次获取的时候才会调用方法创建对象；
* singleton：单实例的（默认值）：ioc容器启动会调用方法创建对象放到ioc容器中。
* 			   以后每次获取就是直接从容器（map.get()）中拿
* request：  同一次请求创建一个实例
* session：  同一个session创建一个实例
     
@Lazy                                 //懒加载, 针对于单实例bean尔存在, 由于单实例默认在容器启动的时候创建对象；
                                      //懒加载的目的：容器启动不创建对象。第一次使用(获取)Bean时创建对象，并初始化

@Conditional({`Condition.class`})     //类中组件统一设置。满足当前条件，这个类中配置的所有bean注册才能生效
                                      //在arguments里面添加运行时变量, -Dos.name=linux


@Bean的生命周期:
    创建 <--> 初始化(可自定义) <--> 销毁(可自定义)
    整个过程由容器来管理
    xml: init-method="" destory-method="", 无参方法,可抛异常
    注解: 
        1) @Bean(initMethod="init", destoryMethod="destory")
           P.S. 当scope是多实例的Bean只有在调用的时候才会初始化,然而不会摧毁(容器只负责创建和初始化),得手动调用destory
        2) 让Bean来实现InitializingBean(afterPropertiesSet())和DisposableBean(destory()) 来动态调用init和destory
        3) JSR250规范(标注在方法上), @PostConstruct(executed after dependency injection is done) 和 @PreDestory
        4) BeanPostProcessor[interface], Bean的初始化前后做一些处理
           postProcessBeforeInitialization: run before afterPropertiesSet, initMethod
           postProcessAfterInitialization:  run after afterPropertiesSet, initMethod
           
           注意: 如果实现了这个接口，每个实例都会调用，这个接口的实现更像一个切面
    
BeanPostProcessor原理
 //先给bean进行属性赋值
 populateBean(beanName, mbd, instanceWrapper);
 
 //再初始化
 initializeBean
 {
 applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
 invokeInitMethods(beanName, wrappedBean, mbd);执行自定义初始化
 applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
}

Spring底层对 BeanPostProcessor 的使用；
    bean赋值，注入其他组件，@Autowired，生命周期注解功能，@Async 等等, 很多都是继承 BeanPostProcessor;

为Bean的属性赋值:
  使用@Value来赋值, @Value中可选的数值 (适用在变量，参数)
    //1、基本数值, like, @Value(2), @Value("zhangsan")
	//2、可以写SpEL； #{}, like, @Value(#{20-2})
	//3、可以写${}；取出配置文件【properties】中的值（在运行环境变量里面的值）
        xml配置方式: <context:property-placeholder location="classpath:person.properties">
                     <bean id="person" class="com.atguigu.bean.Person" scope="prototype">
                        <property name="age" value="${person.age}"></property>
                        <property name="name" value="zhangsan"></property>
                     </bean>
                  
        注解方式: 在当前的@Configuration类上,使用@PropertySource(value={"classpath:person.properties"}), 导入引用文件
                  在对应的类的变量上使用@Value("${person.age}")自动赋默认的值
                  
                  在代码中,也可以取到.properties文件中的值
                  ConfigurableEnvironment environment = applicationContext.getEnvironment();
                  String property = environment.getProperty("person.nickName");
                  
可以使用PropertySources来引入多个PropertySource来指向多个资源文件
        
自动装配:
    @Autowired
        1) 默认优先按照类型去容器中找对应的组件: applicationContext.getBean(BookDao.class)
        2) 如果找到对应相同类型的组件, 再将属性的名称作为组件的id去容器中查找 applicationContext.getBean("bookDao")
        3) @Qualifier("bookDao"), 使用@Qualifier指定需要装配的组件的id,而不是使用属性名
        4) 自动装配默认一定要将属性赋值好,没有就会报错, 可以使用@Autowired(required=false)来避免这个错误
        5) @Primary 让Spring进行自动装配的时候,默认使用首选的bean,但是此时需要禁用@Qualifier, 负责会失效
        优先级逐渐增强 @Autowired > @Primary > @Qualifier
        BookService{
            @Autowired
            BookDao bookDao;
        }
        
    Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范的注解]
        @Resource:
 			可以和@Autowired一样实现自动装配功能；默认是按照组件名称进行装配的；
 			没有能支持@Primary功能; 没有支持@Autowired（reqiured=false）;
 		@Inject:
 			需要导入javax.inject的包，和Autowired的功能一样。没有required=false的功能；有@Primary同样的功能
            @Autowired:Spring定义的； @Resource、@Inject都是java规范
    
    AutowiredAnnotationBeanPostProcessor:解析完成自动装配功能；		
 
    @Autowired: 可放置在构造器，参数，方法，属性；都是从容器中获取参数组件的值
        1）、[标注在方法位置]：@Bean+方法参数；或者set方法；只有一个参数，此时参数从容器中获取和默认不写@Autowired效果是一样的；都能自动装配
  		2）、[标在构造器上]：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件还是可以自动从容器中获取
  		3）、放在参数位置：
        
    自定义组件想要使用Spring容器底层的一些组件（ApplicationContext，BeanFactory，xxx）；
 		自定义组件实现xxxAware；在创建对象的时候，会调用接口规定的方法注入相关组件；Aware；
 		把Spring底层一些组件注入到自定义的Bean中；
 		xxxAware：功能使用xxxAwareProcessor；
 			ApplicationContextAware==>ApplicationContextAwareProcessor；
 
/**
 * Profile：
 * 		Spring为我们提供的可以根据当前环境，动态的激活和切换一系列组件的功能；
 * 
 * 开发环境、测试环境、生产环境；
 * 数据源：(/A)(/B)(/C)；
 * 
 * 
 * @Profile：指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件
 * 
 * 1）、加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中。默认是default环境
 * 2）、写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能开始生效
 * 3）、没有标注环境标识的bean在任何环境下都是加载的；
 */
 
    //1、使用命令行动态参数: 在虚拟机参数位置加载 -Dspring.profiles.active=test
	//2、代码的方式激活某种环境；
        
		//1、创建一个无参的applicationContext
        AnnotationConfigApplicationContext applicationContext = 
				new AnnotationConfigApplicationContext();
		//2、设置需要激活的环境
		applicationContext.getEnvironment().setActiveProfiles("dev");
		//3、注册主配置类
		applicationContext.register(MainConfigOfProfile.class);
		//4、启动刷新容器
		applicationContext.refresh();
    
/**
 * AOP：【动态代理】
 * 		指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式；
 * 
 * 1、导入aop模块；Spring AOP：(spring-aspects)
 * 2、定义一个业务逻辑类（MathCalculator）；在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，xxx）
 * 3、定义一个日志切面类（LogAspects）：切面类里面的方法需要动态感知MathCalculator.div运行到哪里然后执行；
 * 		通知方法：
 * 			前置通知(@Before)：logStart：在目标方法(div)运行之前运行
 * 			后置通知(@After)：logEnd：在目标方法(div)运行结束之后运行（无论方法正常结束还是异常结束）
 * 			返回通知(@AfterReturning)：logReturn：在目标方法(div)正常返回之后运行
 * 			异常通知(@AfterThrowing)：logException：在目标方法(div)出现异常以后运行
 * 			环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）
 * 
 * 4、给切面类的目标方法标注何时何地运行（通知注解）；
 * 5、将切面类和业务逻辑类（目标方法所在类）都加入到容器中;
 * 6、必须告诉Spring哪个类是切面类(给切面类上加一个注解：@Aspect)
 * 7、给配置类中加 @EnableAspectJAutoProxy 【开启基于注解的aop模式】
 * 		在Spring中很多的 @EnableXXX;
 * 
 * 三步：
 * 	1）、将业务逻辑组件和切面类都加入到容器中；告诉Spring哪个是切面类（@Aspect）
 * 	2）、在切面类上的每一个通知方法上标注通知注解，告诉Spring何时何地运行（切入点表达式）
 *  3）、开启基于注解的aop模式；@EnableAspectJAutoProxy
 
 		//1、不要自己创建对象, 需要从容器里面拿
 		//MathCalculator mathCalculator = new MathCalculator();
 		//mathCalculator.div(1, 1);
		MathCalculator mathCalculator = applicationContext.getBean(MathCalculator.class);
        
    //切面类
    @Aspect
    public class LogAspects {
        
        //抽取公共的切入点表达式
        //1、本类引用, example, @Before("pointCut()")
        //2、其他的切面引用， example, @After("com.atguigu.aop.LogAspects.pointCut()")
        @Pointcut("execution(public int com.atguigu.aop.MathCalculator.*(..))")
        public void pointCut(){};
        
        //@Before在目标方法之前切入；切入点表达式（指定在哪个方法切入）
        @Before("pointCut()")
        public void logStart(JoinPoint joinPoint){
            Object[] args = joinPoint.getArgs();
            System.out.println(""+joinPoint.getSignature().getName()+"运行。。。@Before:参数列表是：{"+Arrays.asList(args)+"}");
        }
        
        @After("com.atguigu.aop.LogAspects.pointCut()")
        public void logEnd(JoinPoint joinPoint){
            System.out.println(""+joinPoint.getSignature().getName()+"结束。。。@After");
        }
        
        //JoinPoint一定要出现在参数表的第一位
        @AfterReturning(value="pointCut()",returning="result")
        public void logReturn(JoinPoint joinPoint,Object result){
            System.out.println(""+joinPoint.getSignature().getName()+"正常返回。。。@AfterReturning:运行结果：{"+result+"}");
        }
        
        @AfterThrowing(value="pointCut()",throwing="exception")
        public void logException(JoinPoint joinPoint,Exception exception){
            System.out.println(""+joinPoint.getSignature().getName()+"异常。。。异常信息：{"+exception+"}");
        }

    }

 * =======以下是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程========
 * AOP原理：【看给容器中注册了什么组件，这个组件什么时候工作，这个组件的功能是什么？】
 * 	  @EnableAspectJAutoProxy；
 * 1、@EnableAspectJAutoProxy是什么？
 * 		@Import(AspectJAutoProxyRegistrar.class)：给容器中导入AspectJAutoProxyRegistrar
 * 			利用AspectJAutoProxyRegistrar自定义给容器中注册bean；BeanDefinetion
 * 			org.springframework.aop.config.internalAutoProxyCreator=AnnotationAwareAspectJAutoProxyCreator
 * 
 * 		给容器中注册一个AnnotationAwareAspectJAutoProxyCreator；
 * 
 * 2、 AnnotationAwareAspectJAutoProxyCreator：
 * 		AnnotationAwareAspectJAutoProxyCreator
 * 			->AspectJAwareAdvisorAutoProxyCreator
 * 				->AbstractAdvisorAutoProxyCreator
 * 					->AbstractAutoProxyCreator
 * 							implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware
 * 						关注后置处理器（在bean初始化完成前后执行）、自动装配BeanFactory
 * 
 * AbstractAutoProxyCreator.setBeanFactory()
 * AbstractAutoProxyCreator.有后置处理器的逻辑；
 * 
 * AbstractAdvisorAutoProxyCreator.setBeanFactory()->initBeanFactory()
 * 
 * AnnotationAwareAspectJAutoProxyCreator.initBeanFactory()
 *
 *
 * 流程：
 * 		1）、传入配置类，创建ioc容器
 * 		2）、注册配置类，调用refresh（）刷新容器；
            2）2.1 prepareBeanFactory
 * 		3）、registerBeanPostProcessors(beanFactory);注册bean的后置处理器来方便拦截bean的创建；
 * 			1）、先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor
                 [org.springframework.context.annotation.internalAutowiredAnnotationProcessor,
                    org.springframework.context.annotation.internalRequiredAnnotationProcessor,
                    org.springframework.context.annotation.internalCommonAnnotationProcessor,
                    org.springframework.aop.config.internalAutoProxyCreator]
 * 			2）、给容器中加别的BeanPostProcessor
 * 			3）、优先注册实现了PriorityOrdered接口的BeanPostProcessor；
 * 			4）、再给容器中注册实现了Ordered接口的BeanPostProcessor；
 * 			5）、注册没实现优先级接口的BeanPostProcessor； -> BeanPostProcessorChecker
 * 			6）、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；
 * 				创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】
 * 				1）、创建Bean的实例(PostProcessorRegistrationDelegate.registerBeanPostProcessors -> BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); L225)
 * 				2）、populateBean；给bean的各种属性赋值
 * 				3）、initializeBean：初始化bean；
 * 						1）、invokeAwareMethods()：处理Aware接口的方法回调
 * 						2）、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的postProcessBeforeInitialization（）
 * 						3）、invokeInitMethods()；执行自定义的初始化方法
 * 						4）、applyBeanPostProcessorsAfterInitialization()；执行后置处理器的postProcessAfterInitialization（）；
 * 				4）、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；-->aspectJAdvisorsBuilder
 * 			7）、把BeanPostProcessor注册到BeanFactory中；
 * 				beanFactory.addBeanPostProcessor(postProcessor);
 * =======以上是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程========
    
    2）2.1 prepareBeanFactory
    1）、准备标注的SpEL表达式解析
    2）、PropertySource
    3）、ApplicationContextAwareProcessor (set applicationContext and embeddedValueResolver, and set other xxxAware before bean init)
        EnvironmentAware(String property = environment.getProperty("os.name");)
        EmbeddedValueResolverAware (String resolveStringValue = resolver.resolveStringValue("你好 ${os.name} 我是 #{20*18}");)
        ResourceLoaderAware (传入一个file location, class path or file system resources)
        ApplicationEventPublisherAware(publishEvent)
        MessageSourceAware(set MessageSource)
        ApplicationContextAware(set ApplicationContext)

[org.springframework.context.annotation.internalAutowiredAnnotationProcessor
org.springframework.context.annotation.internalRequiredAnnotationProcessor
org.springframework.context.annotation.internalCommonAnnotationProcessor
org.springframework.aop.config.internalAutoProxyCreator]
    
    